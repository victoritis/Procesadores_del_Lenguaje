/* practica2.java */
/* Generated By:JavaCC: Do not edit this line. practica2.java */
public class practica2 implements practica2Constants {

        //Declaración de variables
        static private int lbl = -1;
        static private int endif = 0;

        //Funciones para obtener el numero de etiqueta
        private static int obtenerSiguienteLBL() {
                return ++lbl;
        }
        private static int obtenerLBL() {
                return lbl;
        }

        //Funciones para obtener el numero de etiqueta al finalizar un IF
        private static int obtenerSiguienteEndIf() {
                endif = obtenerSiguienteLBL();
                return endif;
        }
        private static int obtenerEndIf() {
                return endif;
        }

        //Función main del programa
        public static void main (String[] args) throws Exception {
                if(args.length == 0){   //Entrada por pantalla
                        practica2 parser = new practica2(System.in);
                        parser.programa();
                }else{                  //Entrada mediante fichero
                        practica2 parser = new practica2(new java.io.FileInputStream(args[0]));
                        parser.programa();

                }
        }

/* GRAMÁTICA */
  static final public 
void programa() throws ParseException {
    stmtsequence();
    jj_consume_token(0);
}

/* No terminal 	: stmtsequence
 * Producciones	: stmtsequence -> programstmt | programstmt stmtsequence
 * Return	: void
 */
  static final public void stmtsequence() throws ParseException {
    label_1:
    while (true) {
      programstmt();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case WHILE:
      case IF:
      case PRINT:
      case ID:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
    }
}

/* No terminal 	: programstmt
 * Producciones	: programstmt -> assigconstruct | loopconstruct | ifconstruct | printstmt
 * Return	: void
 */
  static final public void programstmt() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ID:{
      assigconstruct();
      break;
      }
    case WHILE:{
      loopconstruct();
      break;
      }
    case IF:{
      ifconstruct();
      break;
      }
    case PRINT:{
      printstmt();
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

/* No terminal 	: loopconstruct
 * Terminales	: <WHILE>, "(", ")", <ENDWHILE>
 * Producciones	: loopconstruct -> WHILE '(' expr ')' stmtsequence ENDWHILE
 * Return	: void
 *
 */
  static final public void loopconstruct() throws ParseException {Token tk;
        int etiqueta_while = obtenerSiguienteLBL(); int etiqueta_fin_while = obtenerSiguienteLBL();
    tk = jj_consume_token(WHILE);
System.out.println("LBL" + etiqueta_while);
    jj_consume_token(13);
    expr();
    jj_consume_token(14);
System.out.println("\tsifalsovea LBL" + etiqueta_fin_while);
    stmtsequence();
    tk = jj_consume_token(ENDWHILE);
System.out.println("\tvea LBL" + etiqueta_while + "\nLBL" + etiqueta_fin_while);
}

/* No terminal 	: ifconstruct
 * Terminales	: <ENDIF>
 * Producciones	: ifthenstmt stmtsequence (elseifconstruct)* (elseconstruct)? ENDIF
 * Return	: void
 *
 */
  static final public void ifconstruct() throws ParseException {Token tk;
        int etiqueta_fin_if = obtenerSiguienteEndIf();
    ifthenstmt();
    stmtsequence();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ELSEIF:{
        ;
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      elseifconstruct();
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ELSE:{
      elseconstruct();
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    tk = jj_consume_token(ENDIF);
System.out.println("LBL" + etiqueta_fin_if);
}

/* No terminal 	: ifthenstmt
 * Terminales	: <IF>, "(", ")", <THEN>
 * Producciones	: ifthenstmt -> IF '(' expr ')' THEN
 * Return	: void
 *
 */
  static final public void ifthenstmt() throws ParseException {Token tk;
        int etiqueta_if_falso = obtenerSiguienteLBL();
    tk = jj_consume_token(IF);
    jj_consume_token(13);
    expr();
    jj_consume_token(14);
System.out.println("\tsifalsovea LBL" + etiqueta_if_falso);
    tk = jj_consume_token(THEN);
}

/* No terminal 	: elseifconstruct
 * Terminales	: <ELSEIF>, "(", ")", <THEN>
 * Producciones	: elseifconstruct -> ELSEIF '(' expr ')' THEN stmtsequence
 * Return	: void
 *
 */
  static final public void elseifconstruct() throws ParseException {Token tk;
        int etiqueta_elseif = obtenerLBL(); int etiqueta_elseif_falso = obtenerSiguienteLBL();
        int etiqueta_fin_if = obtenerEndIf();
    tk = jj_consume_token(ELSEIF);
System.out.println("\tvea LBL" + etiqueta_fin_if + "\nLBL" + etiqueta_elseif);
    jj_consume_token(13);
    expr();
    jj_consume_token(14);
System.out.println("\tsifalsovea LBL" + etiqueta_elseif_falso);
    tk = jj_consume_token(THEN);
    stmtsequence();
}

/* No terminal 	: elseconstruct
 * Terminales	: <ELSE>
 * Producciones	: elseconstruct -> ELSE stmtsequence
 * Return	: void
 *
 */
  static final public void elseconstruct() throws ParseException {Token tk;
        int etiqueta_else = obtenerLBL(); int etiqueta_fin_else = obtenerSiguienteLBL();
        int etiqueta_fin_if = obtenerEndIf();
    tk = jj_consume_token(ELSE);
System.out.println("\tvea LBL" + etiqueta_fin_if + "\nLBL" + etiqueta_else);
    stmtsequence();
}

/* No terminal 	: printstmt
 * Terminales	: <PRINT>, ","
 * Producciones	: printstmt -> PRINT expr (',' expr)*
 * Return	: void
 *
 */
  static final public void printstmt() throws ParseException {Token tk;
    tk = jj_consume_token(PRINT);
    expr();
System.out.println("\tprint");
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 15:{
        ;
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        break label_3;
      }
      jj_consume_token(15);
      expr();
System.out.println("\tprint");
    }
}

/* No terminal 	: assigconstruct
 * Terminales	: <ID>, "=", "++", "--"
 * Producciones	: assigconstruct -> ID '=' expr | ID '++' | ID '--'
 * Return	: void
 *
 */
  static final public void assigconstruct() throws ParseException {Token tk;
    tk = jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 16:{
      jj_consume_token(16);
System.out.println("\tvalori "+ tk.image);
      expr();
System.out.println("\tasigna");
      break;
      }
    case 17:{
      jj_consume_token(17);
System.out.println("\tvalori "+ tk.image + "\n\tvalord "+ tk.image + "\n\tmete 1" + "\n\tsum" + "\n\tasigna");
      break;
      }
    case 18:{
      jj_consume_token(18);
System.out.println("\tvalori "+ tk.image + "\n\tvalord "+ tk.image + "\n\tmete 1" + "\n\tsub" + "\n\tasigna");
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

/*
 * expr -> expr ('+' multexp | '-' multexp) | multexp
 */
/* No terminal 	: expr
 * Producciones	: expr -> multexp expr1
 * Return	: void
 *
 */
  static final public void expr() throws ParseException {
    multexp();
    expr1();
}

/* No terminal 	: expr1
 * Terminales	: "+", "-"
 * Producciones	: expr1 -> ('+' multexp | '-' multexp) expr1
 * Return	: void
 *
 */
  static final public void expr1() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 19:
    case 20:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 19:{
        jj_consume_token(19);
        multexp();
System.out.println("\tsum");
        break;
        }
      case 20:{
        jj_consume_token(20);
        multexp();
System.out.println("\tsub");
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      expr1();
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      ;
    }
}

/* No terminal 	: multexp
 * Producciones	: multexp -> value multexp1
 * Return	: void
 *
 */
  static final public void multexp() throws ParseException {
    value();
    multexp1();
}

/* No terminal 	: multexp1
 * Terminales	: "*", "/"
 * Producciones	: multexp1 -> ('*' value | '/' value) multexp1
 * Return	: void
 *
 */
  static final public void multexp1() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 21:
    case 22:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 21:{
        jj_consume_token(21);
        value();
System.out.println("\tmul");
        break;
        }
      case 22:{
        jj_consume_token(22);
        value();
System.out.println("\tdiv");
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      multexp1();
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      ;
    }
}

/*
 *
 */
/* No terminal 	: value
 * Terminales	: "(", ")", <NUM>, <ID>
 * Producciones	: value -> '(' expr ')' | NUM | ID
 * Return	: void
 *
 */
  static final public void value() throws ParseException {Token tk;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 13:{
      jj_consume_token(13);
      expr();
      jj_consume_token(14);
      break;
      }
    case NUM:{
      tk = jj_consume_token(NUM);
System.out.println("\tmete " + tk.image);
      break;
      }
    case ID:{
      tk = jj_consume_token(ID);
System.out.println("\tvalord " + tk.image);
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public practica2TokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[11];
  static private int[] jj_la1_0;
  static {
	   jj_la1_init_0();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x1428,0x1428,0x100,0x200,0x8000,0x70000,0x180000,0x180000,0x600000,0x600000,0x3800,};
	}

  /** Constructor with InputStream. */
  public practica2(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public practica2(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new practica2TokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public practica2(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new practica2TokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new practica2TokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public practica2(practica2TokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(practica2TokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[23];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 11; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 23; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
