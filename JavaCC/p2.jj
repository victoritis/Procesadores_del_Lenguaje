/*
 * Título    	: Minicompilador con JavaCC
 * Descripción	: Programa en JavaCC para obtener un compilador que traduzca un lenguaje
 *		  de alto nivel a código de máquina de pila abstracta.
 * Autores    	: Victor Gonzalez
 * Fecha      	: 11/11/2022
 * Versión    	: v.1.0
 * Asignatura 	: Procesadores del Lenguaje
 * Entrega    	: Práctica 2
 *
 */

/* PARSER */

PARSER_BEGIN(practica2)

public class practica2{

	//Declaración de variables
	static private int lbl = -1;
	static private int endif = 0;

	//Funciones para obtener el numero de etiqueta
	private static int obtenerSiguienteLBL() {
		return ++lbl;
	}
	private static int obtenerLBL() {
		return lbl;
	}

	//Funciones para obtener el numero de etiqueta al finalizar un IF
	private static int obtenerSiguienteEndIf() {
		endif = obtenerSiguienteLBL();
		return endif;
	}
	private static int obtenerEndIf() {
		return endif;
	}

	//Función main del programa
	public static void main (String[] args) throws Exception {
		if(args.length == 0){	//Entrada por pantalla
                	practica2 parser = new practica2(System.in);
                	parser.programa();
        	}else{ 			//Entrada mediante fichero
                	practica2 parser = new practica2(new java.io.FileInputStream(args[0]));
                	parser.programa();

        	}
    	}

}

PARSER_END(practica2)

/* SKIPS */

SKIP: {
 	//Saltamos cualquier espaciado, salto  de linea o tabuladores
 	<SPC: [" ","\n", "\t","\r"]>
 	//Tambien nos saltamos los posibles comentarios que comiencen por una exclamación
|	<COM: "#" (~["\n"])*"\n">
}

/* TOKENS */

TOKEN:
{
	//Todas las palabras reservadas para poder hacer que nuestro programa funcione
	<WHILE: ("while")>
        |<ENDWHILE: ("endwhile")>
        |<IF: ("if")>
        |<ENDIF: ("endif")>
        |<THEN: ("then")>
        |<ELSEIF: ("elseif")>
        |<ELSE: ("else")>
        |<PRINT: ("print")>
        |<READ: ("read")>
        |<DO: ("do")>
        |<OPAR: "(">
	|<CPAR: ")">
	|<FOR: "for">
}

TOKEN:
{
 	<NUM: (["0"-"9"])+> //Todos los números enteros
        |<ID: (["a"-"z"]|["A"-"Z"]|"_")(["a"-"z" ]|["A"-"Z"]|<NUM>|"_"){0,50}>
        /* ID, reconoce las letras minúsculas, mayúsculas, guiones bajos y números, sin embargo
 	 * no reconoce algo que comience con números. Está declarada al final debido a que puede
 	 * haber caso de empate de longitud con otros tokenes y ejecutarse ID en vez de otro token
 	 * y no queremos que eso suceda.*/
}

/* GRAMÁTICA */

void programa():{}
{
	stmts()
  	<EOF>
}

/* No terminal 	: stmts
 * Producciones	: stmts -> stmt ';' stmts | stmt
 * Return	: void
 */
void stmts():{}
{
  	(stmt() <";"> stmts())?
}


/* No terminal : stmt
 * Producciones : stmt -> loop | cond | assig | io
 * Return : void
 */
void stmt():{}
{
    (loop() | cond() | assig() | io())
}


/* No terminal : loop
 * Producciones : loop -> 'do' stmts 'while' '(' expr ')'
 *              | 'for' '(' ID 'from' expr 'to' NUM ')' '{' stmts '}'
 *              | 'for' '(' ID 'from' expr 'to' NUM 'by' NUM ')' '{' stmts '}'
 * Return : void
 */
void loop():{
    Token tk;
    int etiqueta_inicio, etiqueta_fin;
}
{

    (
        tk=<DO>
        {
            etiqueta_inicio = obtenerSiguienteLBL();
            etiqueta_fin = obtenerSiguienteLBL();
            System.out.println("LBL" + etiqueta_inicio);
        }
        stmts() tk=<WHILE> "(" expr() ")"
        {
            System.out.println("\tsifalsovea LBL" + etiqueta_fin);
        }
        {
            System.out.println("\tvea LBL" + etiqueta_inicio);
            System.out.println("LBL" + etiqueta_fin);
        }
    |   tk=<FOR> "(" tk=<ID> "from" expr() "to" tk=<NUM> ")" "{"
        {
            etiqueta_inicio = obtenerSiguienteLBL();
            etiqueta_fin = obtenerSiguienteLBL();
            System.out.println("LBL" + etiqueta_inicio);
        }
        stmts() "}"
        {
            System.out.println("\tvalori " + tk.image.toString);
            System.out.println("\tasigna");
            System.out.println("\tsalto LBL" + etiqueta_fin);
            System.out.println("LBL" + etiqueta_fin);
        }
    |   tk=<FOR> "(" tk=<ID> "from" expr() "to" tk=<NUM> "by" tk=<NUM> ")" "{"
        {
            etiqueta_inicio = obtenerSiguienteLBL();
            etiqueta_fin = obtenerSiguienteLBL();
            System.out.println("LBL" + etiqueta_inicio);
        }
        stmts() "}"
        {
            System.out.println("\tvalori " + tk.image.toString);
            System.out.println("\tvalord " + tk.image.toString);
            System.out.println("\tvalori " + tk.image.toString);
            System.out.println("\tsub");
            System.out.println("\tvalori " + tk.image.toString);
            System.out.println("\tmen");
            System.out.println("\tvalori 0");
            System.out.println("\tsifalsovea LBL" + etiqueta_fin);
            System.out.println("\tasigna");
            System.out.println("\tsalto LBL" + etiqueta_inicio);
            System.out.println("LBL" + etiqueta_fin);
        }
    )
}


/* No terminal : cond
 * Producciones : cond -> 'if' '(' expr ')' '{' stmts '}'
 *              | 'if' '(' expr ')' '{' stmts '}' 'else' '{' stmts '}'
 * Return : void
 */
void cond():{
    Token tk;
    int etiqueta_fin_if = obtenerSiguienteEndIf();
}
{
    (
        tk=<IF> "(" expr() ")" "{"
        {
            System.out.println("\tsifalsovea LBL" + etiqueta_fin_if);
        }
        stmts() "}"
        {
            System.out.println("\tvea LBL" + etiqueta_fin_if);
        }
    |   tk=<IF> "(" expr() ")" "{" stmts() "}" tk=<ELSE> "{" stmts() "}"
        {
            System.out.println("\tsalto LBL" + etiqueta_fin_if);
            System.out.println("\tvea LBL" + etiqueta_fin_if);
        }
    )
}



/* No terminal 	: io
 * Terminales	: <PRINT>, <READ>
 * Producciones	: io -> PRINT expr | READ ID
 * Return	: void
 */
void io():{
	Token tk;
}
{
    (
        tk=<PRINT> expr() {System.out.println("\tprint");}
    |   tk=<READ> <ID> {System.out.println("\tread " + tk.image.toString);}
    )
}



/* No terminal 	: assig
 * Terminales	: <ID>, "=", "+=", "-=", "*=", "/="
 * Producciones	: assig -> ID '<:' expr | ID '+=' expr | ID '-=' expr | ID '*=' expr | ID '/=' expr
 * Return	: void
 */
void assig():{
	Token tk;
}
{
	tk = <ID>
	(
	   "<:" {System.out.println("\tvalori " + tk.image.toString);} expr() {System.out.println("\tasigna");}
	|  "+=" {System.out.println("\tvalori " + tk.image.toString + "\n\tvalord " + tk.image.toString);} expr() {System.out.println("\n\tadd" + "\n\tasigna");}
	|  "-=" {System.out.println("\tvalori " + tk.image.toString + "\n\tvalord " + tk.image.toString);} expr() {System.out.println("\n\tsub" + "\n\tasigna");}
	|  "*=" {System.out.println("\tvalori " + tk.image.toString + "\n\tvalord " + tk.image.toString);} expr() {System.out.println("\n\tmul" + "\n\tasigna");}
	|  "/=" {System.out.println("\tvalori " + tk.image.toString + "\n\tvalord " + tk.image.toString);} expr() {System.out.println("\n\tdiv" + "\n\tasigna");}
	)
}


/* No terminal : expr
 * Producciones : expr -> expr '+' mult | expr '-' mult | mult
 * Return : void
 */
void expr():{}
{
    mult() expr1()
}

/* No terminal : expr1
 * Terminales : "+", "-"
 * Producciones : expr1 -> '+' mult expr1 | '-' mult expr1 | ε
 * Return : void
 */
void expr1():{}
{
    (
        "+" mult() {System.out.println("\tsum");}
    |   "-" mult() {System.out.println("\tsub");}
    )*
}



/* No terminal : mult
 * Producciones : mult -> val mult1 | val
 * Return : void
 */
void mult():{}
{
    val() mult1()
}

/* No terminal : mult1
 * Terminales : "*", "/"
 * Producciones : mult1 -> '*' val mult1 | '/' val mult1 | ε
 * Return : void
 */
void mult1():{}
{
    (
        "*" val() {System.out.println("\tmul");}
    |   "/" val() {System.out.println("\tdiv");}
    )*
}


/* No terminal : val
 * Producciones : val -> NUM | ID | '(' expr ')'
 * Return : void
 */
void val():{
    Token tk;
}
{
    (
        tk=<NUM> {System.out.println("\tmete " + tk.image.toString);}
    |   tk=<ID> {System.out.println("\tvalord " + tk.image.toString);}
    |   "(" expr() ")" 
    )
}
