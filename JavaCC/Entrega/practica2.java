/* practica2.java */
/* Generated By:JavaCC: Do not edit this line. practica2.java */
public class practica2 implements practica2Constants {

        //Declaración de variables
        static private int lbl = -1;
        static private int endif = 0;

        //Funciones para obtener el numero de etiqueta
        private static int obtenerSiguienteLBL() {
                return ++lbl;
        }
        private static int obtenerLBL() {
                return lbl;
        }
        private static int restarLBL() {
                return --lbl;
        }


        //Función main de practica2
        public static void main (String[] args) throws Exception {
                if(args.length == 0){   //Entrada por pantalla
                        practica2 parser = new practica2(System.in);
                        parser.practica2();
                }else{                  //Entrada mediante fichero
                        practica2 parser = new practica2(new java.io.FileInputStream(args[0]));
                        parser.practica2();

                }
        }

/* GRAMÁTICA */
  static final public 
void practica2() throws ParseException {
    stmts();
    jj_consume_token(0);
}

/* No terminal 	: stmts
 * Producciones	: stmts -> stmt ';' stmts | stmt
 * Return	: void
 */
  static final public void stmts() throws ParseException {
    stmt();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 21:{
      jj_consume_token(21);
      stmts();
      break;
      }
    default:
      jj_la1[0] = jj_gen;
      ;
    }
}

/* No terminal : stmt
 * Producciones : stmt -> loop | cond | assig | io
 * Return : void
 */
  static final public void stmt() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ID:{
      assig();
      break;
      }
    case PRINT:
    case READ:{
      io();
      break;
      }
    case IF:{
      cond();
      break;
      }
    case DO:
    case FOR:{
      loop();
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

/* No terminal 	: assig
 * Terminales	: <ID>, "=", "+=", "-=", "*=", "/="
 * Producciones	: assig -> ID '<:' expr | ID '+=' expr | ID '-=' expr | ID '*=' expr | ID '/=' expr
 * Return	: void
 */
  static final public void assig() throws ParseException {Token tk;
    tk = jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 22:{
      jj_consume_token(22);
System.out.println("\tvalori " + tk.image);
      expr();
System.out.println("\tasigna");
      break;
      }
    case 23:{
      jj_consume_token(23);
System.out.println("\tvalori " + tk.image + "\n\tvalord " + tk.image);
      expr();
System.out.println("\tadd" + "\n\tasigna");
      break;
      }
    case 24:{
      jj_consume_token(24);
System.out.println("\tvalori " + tk.image + "\n\tvalord " + tk.image);
      expr();
System.out.println("\tsub" + "\n\tasigna");
      break;
      }
    case 25:{
      jj_consume_token(25);
System.out.println("\tvalori " + tk.image + "\n\tvalord " + tk.image);
      expr();
System.out.println("\tmul" + "\n\tasigna");
      break;
      }
    case 26:{
      jj_consume_token(26);
System.out.println("\tvalori " + tk.image + "\n\tvalord " + tk.image);
      expr();
System.out.println("\tdiv" + "\n\tasigna");
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

/* No terminal : cond
 * Producciones : cond ->  'if' '(' expr ')' '{' stmts '}'  'else' '{' stmts '}'
 *								cond ->  'if' '(' expr ')' '{' stmts '}'
 * Return : void
 */
  static final public void cond() throws ParseException {Token tk;
        int etiqueta_else = obtenerSiguienteLBL();
        int etiqueta_fin_if = obtenerSiguienteLBL();
        boolean print = true;   //Sirve para imprimir la etiqueta LBL en caso de que no haya else en la condicion

    tk = jj_consume_token(IF);
    jj_consume_token(OPAR);
    expr();
    jj_consume_token(CPAR);
System.out.println("\tsifalsovea LBL" + etiqueta_else);
    jj_consume_token(27);
    stmts();
    jj_consume_token(28);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ELSE:{
      jj_consume_token(ELSE);
System.out.println("\tvea LBL" + etiqueta_fin_if);
System.out.println("LBL" + etiqueta_else + ":");
      jj_consume_token(27);
      stmts();
      jj_consume_token(28);
System.out.println("LBL" + etiqueta_fin_if + ":");
print = false;
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      ;
    }
if(print==true){System.out.println("LBL" + etiqueta_else + ":"); restarLBL();}
}

/* No terminal: loop
 * Terminales: 'do', 'while', '(', ')', 'for', '{', '}', 'from', 'to', 'by', ID, NUM
 * Producciones:
 *   loop -> 'do' stmts 'while' '(' expr ')'
 *        | 'for' '(' ID 'from' expr 'to' NUM ')' '{' stmts '}'
 *        | 'for' '(' ID 'from' expr 'to' NUM 'by' NUM ')' '{' stmts '}'
 * Return: void
 */
  static final public  void loop() throws ParseException {Token tk1,tk2,tk3 = null;
        int etiqueta_do = obtenerSiguienteLBL();        //tambien sirve para moverse por el for de igual manera que en el while
        int etiqueta_fin_while = obtenerSiguienteLBL(); //tambien sirve para moverse por el for de igual manera que en el while

    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DO:{
      tk1 = jj_consume_token(DO);
System.out.println("LBL" + etiqueta_do + ":");
      stmts();
      jj_consume_token(WHILE);
      jj_consume_token(OPAR);
      expr();
      jj_consume_token(CPAR);
System.out.println("\tsifalsovea LBL" + etiqueta_fin_while);
System.out.println("\tvea LBL" + etiqueta_do);
System.out.println("LBL" + etiqueta_fin_while + ":");
      break;
      }
    case FOR:{
      jj_consume_token(FOR);
      jj_consume_token(OPAR);
      tk1 = jj_consume_token(ID);
System.out.println("\tvalori " + tk1.image );
      jj_consume_token(FROM);
      expr();
System.out.println("\tasigna");
System.out.println("LBL" + etiqueta_do + ":");
      jj_consume_token(TO);
      tk2 = jj_consume_token(NUM);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BY:{
        jj_consume_token(BY);
        tk3 = jj_consume_token(NUM);
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        ;
      }
      jj_consume_token(CPAR);
      jj_consume_token(27);
      stmts();
      jj_consume_token(28);
System.out.println(
                "\tvalori " + tk1.image + "\n" +
                "\tvalord " + tk1.image + "\n" +
                "\tmete " + (tk3 != null ? tk3.image : "1") + "\n" +
                "\tadd\n" +
                "\tasigna\n" +
                "\tmete " + tk2.image + "\n" +
                "\tvalord " + tk1.image + "\n" +
                "\tsub\n" +
                "\tsifalsovea LBL" + etiqueta_fin_while + "\n" +
                "\tvea LBL" + etiqueta_do + "\n" +
                "LBL" + etiqueta_fin_while + ":");
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

/* No terminal 	: io
 * Terminales	: <PRINT>, <READ>
 * Producciones	: io -> PRINT expr | READ IDFOR
 * Return	: void
 */
  static final public void io() throws ParseException {Token tk;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PRINT:{
      tk = jj_consume_token(PRINT);
      expr();
System.out.println("\tprint");
      break;
      }
    case READ:{
      tk = jj_consume_token(READ);
      tk = jj_consume_token(ID);
System.out.println("\tread " + tk.image);
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

/* No terminal : expr
 * Producciones : expr -> expr '+' mult | expr '-' mult | mult
 * Return : void
 */
  static final public void expr() throws ParseException {
    mult();
    expr1();
}

/* No terminal : expr1
 * Terminales : "+", "-"
 * Producciones : expr1 -> '+' mult expr1 | '-' mult expr1 | ε
 * Return : void
 */
  static final public void expr1() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 29:
    case 30:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 29:{
        jj_consume_token(29);
        mult();
System.out.println("\tadd");
        break;
        }
      case 30:{
        jj_consume_token(30);
        mult();
System.out.println("\tsub");
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      expr1();
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      ;
    }
}

/* No terminal : mult
 * Producciones : mult -> val mult1 | val
 * Return : void
 */
  static final public void mult() throws ParseException {
    val();
    mult1();
}

/* No terminal : mult1
 * Terminales : "*", "/"
 * Producciones : mult1 -> '*' val mult1 | '/' val mult1 | ε
 * Return : void
 */
  static final public void mult1() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 31:
    case 32:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 31:{
        jj_consume_token(31);
        val();
System.out.println("\tmul");
        break;
        }
      case 32:{
        jj_consume_token(32);
        val();
System.out.println("\tdiv");
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      mult1();
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      ;
    }
}

/* No terminal : val
 * Producciones : val -> NUM | ID | '(' expr ')'
 * Return : void
 */
  static final public void val() throws ParseException {Token tk;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NUM:{
      tk = jj_consume_token(NUM);
System.out.println("\tmete " + tk.image);
      break;
      }
    case ID:{
      tk = jj_consume_token(ID);
System.out.println("\tvalord " + tk.image);
      break;
      }
    case OPAR:{
      jj_consume_token(OPAR);
      expr();
      jj_consume_token(CPAR);
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public practica2TokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[12];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x200000,0x109c20,0x7c00000,0x200,0x40000,0x9000,0xc00,0x60000000,0x60000000,0x80000000,0x80000000,0x182000,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,};
	}

  /** Constructor with InputStream. */
  public practica2(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public practica2(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new practica2TokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public practica2(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new practica2TokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new practica2TokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public practica2(practica2TokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(practica2TokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[33];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 12; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 33; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
